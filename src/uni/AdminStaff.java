package uni;

/**
 * AdminStaff class that extends User
 */
public class AdminStaff extends User {
    private String staffId;
    private Department department;
    private String role;

    /**
     * Constructor for AdminStaff class
     * 
     * @param userId      Unique identifier
     * @param username    Login username
     * @param password    User password
     * @param name        Full name
     * @param email       Email address
     * @param contactInfo Contact information
     * @param staffId     Staff ID
     * @param department  Department the staff belongs to
     * @param role        Administrative role
     */
    public AdminStaff(String userId, String username, String password, String name, String email, String contactInfo,
            String staffId, Department department, String role) {
        super(userId, username, password, name, email, contactInfo);
        this.staffId = staffId;
        this.department = department;
        this.role = role;
    }

    // Getters and setters
    public String getStaffId() {
        return staffId;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    /**
     * Register a new student in the system
     * 
     * @param student Student to register
     * @return true if registration successful, false otherwise
     */
    public boolean registerStudent(Student student) {
        // In a real implementation, this would add the student to the database
        // For now, just simulate success
        return true;
    }

    /**
     * Create a new course in the system
     * 
     * @param course Course to create
     * @return true if creation successful, false otherwise
     */
    public boolean createCourse(Course course) {
        // In a real implementation, this would add the course to the database
        // For now, just simulate success
        return true;
    }

    /**
     * Assign faculty to a course
     * 
     * @param courseOffering Course offering
     * @param faculty        Faculty to assign
     * @return true if assignment successful, false otherwise
     */
    public boolean assignFaculty(CourseOffering courseOffering, Faculty faculty) {
        return faculty.assignCourse(courseOffering);
    }

    /**
     * Generate reports based on system data
     * 
     * @param reportType Type of report to generate
     * @return Report content as a string
     */
    public String generateReport(String reportType) {
        StringBuilder report = new StringBuilder();

        switch (reportType) {
            case "EnrollmentSummary":
                report.append("=== Enrollment Summary Report ===\n");
                report.append("Generated by: ").append(getName()).append("\n");
                report.append("Date: ").append(java.time.LocalDate.now()).append("\n");
                report.append("This report would contain enrollment statistics\n");
                break;

            case "FacultyWorkload":
                report.append("=== Faculty Workload Report ===\n");
                report.append("Generated by: ").append(getName()).append("\n");
                report.append("Date: ").append(java.time.LocalDate.now()).append("\n");
                report.append("This report would contain faculty teaching loads\n");
                break;

            case "StudentPerformance":
                report.append("=== Student Performance Report ===\n");
                report.append("Generated by: ").append(getName()).append("\n");
                report.append("Date: ").append(java.time.LocalDate.now()).append("\n");
                report.append("This report would contain student GPA statistics\n");
                break;

            default:
                report.append("Unknown report type: ").append(reportType);
        }

        return report.toString();
    }

    @Override
    public String getUserType() {
        return "AdminStaff";
    }

    @Override
    public String toString() {
        return "AdminStaff{" +
                "staffId='" + staffId + '\'' +
                ", department=" + (department != null ? department.getName() : "none") +
                ", role='" + role + '\'' +
                "} " + super.toString();
    }
}